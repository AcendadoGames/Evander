class MovementController : ZilchComponent
{
    [Property]
    var MoveSpeed : Real = 10.0;
    
    [Property]
    var DashSpeed : Real = 50;
    
    [Property]
    var JumpSpeed : Real = 10.0;
    
    [Property]
    var RotationSpeed : Real = 2;
    
    var CanPlay : Boolean =  true;
    
    var Epsilon : Real = Real(1.5);
    
    var Controller:Gamepad = null;

    function Initialize(init : CogInitializer)
    {
        this.Controller = Zero.Gamepads.GetGamePad(0);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, "MoveLeft", this.OnKeyboardEvent);
        Zero.Connect(this.Owner, "MoveRight", this.OnKeyboardEvent);
        Zero.Connect(this.Owner, "DashLeft", this.OnKeyboardEvent);
        Zero.Connect(this.Owner, "DashRight", this.OnKeyboardEvent);
        Zero.Connect(this.Owner, "Jump", this.OnKeyboardEvent);
        Zero.Connect(this.Owner, "MoveDown", this.OnKeyboardEvent);
        Zero.Connect(this.Owner, "PlayerDead", this.AllowPlay);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.CanJump);
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.WallJump);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.WallJumpEnded);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    function AllowPlay(event : ZilchEvent)
    {
        if(event.EventId == "PlayerDead")
            this.CanPlay = false;
    }
    function OnKeyboardEvent(event : ZilchEvent)
    {
        if(this.CanPlay && !this.Space.GlobalVariables.Dashing)
        {
            var move : Real3 = Real3(0,0,0);
        
            var rotation = Real3(0,0,0);
            
            if(event.EventId == "MoveLeft")
            {
                //movement
                move = Real3(-1,0,0) * this.MoveSpeed;
                //rotation
                rotation = Real3(-1,0,0) * this.RotationSpeed;      
                this.Owner.RigidBody.AngularVelocity += rotation;
            }
            if(event.EventId == "DashLeft")
            {
                //movement
                move = Real3(-1,0,0) * this.DashSpeed;
                //rotation
                rotation = Real3(-1,0,0) * this.RotationSpeed;      
                this.Owner.RigidBody.AngularVelocity += rotation;
            }
            if(event.EventId == "MoveRight")
            {
                //movement
                move = Real3(1,0,0) * this.MoveSpeed;
                //rotation
                rotation = Real3(-1,0,0) * this.RotationSpeed;      
                this.Owner.RigidBody.AngularVelocity += rotation;
            }
            if(event.EventId == "DashRight")
            {
                //movement
                move = Real3(1,0,0) * this.DashSpeed;
                //rotation
                rotation = Real3(-1,0,0) * this.RotationSpeed;      
                this.Owner.RigidBody.AngularVelocity += rotation;
            }
            if(event.EventId == "Jump")
            {
                //movement
                if(this.Owner.RigidBody.Velocity.X > 0)
                    move = Real3(0.5,1,0) * this.JumpSpeed;
                else if(this.Owner.RigidBody.Velocity.X < 0)
                    move = Real3(-0.5,1,0) * this.JumpSpeed;
                else
                    move = Real3(0,1,0) * this.JumpSpeed;
                //rotation
                rotation = Real3(-1,0,0) * this.RotationSpeed;      
                this.Owner.RigidBody.AngularVelocity += rotation;
            }
            
            /*if(event.EventId == "MoveDown")
            {
                //movement
                move = Real3(0,-1,0) * this.MoveSpeed;
                //rotation
                rotation = Real3(-1,0,0) * this.RotationSpeed;      
                this.Owner.RigidBody.AngularVelocity += rotation;
            }*/
            
            //movement
            this.Owner.RigidBody.Velocity += move;
        }
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.Space.GlobalVariables.Dashing)
        {
            var distance = Math.Distance(this.Owner.Transform.Translation, this.Space.FindObjectByName("PrototypePlayer").TargetSelector.TargetPosition); 
            if(distance > this.Epsilon)
            {
                this.Owner.Transform.Translation = Math.Lerp(this.Owner.Transform.Translation, 
                                                             this.Space.FindObjectByName("PrototypePlayer").TargetSelector.TargetPosition, 
                                                            0.075);
            }
            else
            {
                this.Space.GlobalVariables.Dashing = false;
                this.Space.GlobalVariables.CanDash = false;
                this.Space.GlobalVariables.Spell1TimeToJump = this.Space.GlobalVariables.Temp;
            }
            
        }
        if(!this.Space.GlobalVariables.WallDampening && this.Owner.RigidBody.Velocity.Y < 0)
            this.CanPlay = true;
        
    }
    
    function CanJump(event : CollisionEvent)
    {
        if(event.OtherObject.BoxCollider.CollisionGroup == CollisionGroup.Ground)
        {
            this.Space.GlobalVariables.CanJump = true;
        }
           /*if(event.OtherObject.BoxCollider.CollisionGroup == CollisionGroup.Ground && 
           event.Object.BoxCollider.Contacts.Current.FirstPoint.WorldNormalTowardsOther.Y < 0.1 &&
           event.Object.BoxCollider.Contacts.Current.FirstPoint.WorldNormalTowardsOther.Y > -0.1)
            {
                this.CanPlay = true;
            }*/

    }
    function WallJump(event : CollisionEvent)
    {

        if(event.OtherObject.BoxCollider.CollisionGroup == CollisionGroup.Ground && 
           event.Object.BoxCollider.Contacts.Current.FirstPoint.WorldNormalTowardsOther.Y < 0.1 &&
           event.Object.BoxCollider.Contacts.Current.FirstPoint.WorldNormalTowardsOther.Y > -0.1 &&
           event.Object.BoxCollider.Contacts.Current.FirstPoint.WorldNormalTowardsOther.X < 0 && 
           event.OtherObject.Name == "Wall")
            {
                this.CanPlay = false;
                this.Space.GlobalVariables.WallDampening = true;
                if(Zero.Keyboard.KeyIsPressed(Keys.W) || this.Controller.IsButtonPressed(Buttons.A))
                {
                    var move = Real3(1,1,0) * this.JumpSpeed;
                    this.Owner.RigidBody.Velocity += move;
                }
                
            }
            
        else if(event.OtherObject.BoxCollider.CollisionGroup == CollisionGroup.Ground && 
           event.Object.BoxCollider.Contacts.Current.FirstPoint.WorldNormalTowardsOther.Y < 0.1 &&
           event.Object.BoxCollider.Contacts.Current.FirstPoint.WorldNormalTowardsOther.Y > -0.1 &&
           event.Object.BoxCollider.Contacts.Current.FirstPoint.WorldNormalTowardsOther.X > 0 && 
           event.OtherObject.Name == "Wall")
            {
                this.CanPlay = false;
                this.Space.GlobalVariables.WallDampening = true;
                if(Zero.Keyboard.KeyIsPressed(Keys.W) || this.Controller.IsButtonPressed(Buttons.A))
                {
                    
                    var move = Real3(-1,1,0) * this.JumpSpeed;
                    this.Owner.RigidBody.Velocity += move;
                }
            }
        else
        {
            this.CanPlay = true;
            this.Space.GlobalVariables.WallDampening = false;
        }

            
       if(event.Object.BoxCollider.Contacts.Current.FirstPoint.WorldNormalTowardsOther.Y == -1)
                this.CanPlay = true;

    }
    function WallJumpEnded(event : CollisionEvent)
    {
        /*if(event.OtherObject.BoxCollider.CollisionGroup == CollisionGroup.Ground)
            this.CanPlay = false;*/
        
        this.Space.GlobalVariables.WallDampening = false;

    }
    function OnCollisionStarted(event : CollisionEvent)
    {
        //when hitting a checkpoint, save this position in the level
        if(event.OtherObject.Name == "Checkpoint")
        {
            this.Space.GlobalVariables.StartPosition = event.OtherObject.Transform.Translation;
        }
    }
}