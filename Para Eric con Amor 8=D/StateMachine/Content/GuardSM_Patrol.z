class GuardSM_Patrol : SuperState
{
    // Path to the sensor object
    [Property] var SensorCopPath : CogPath = null;
    var SensorCog : Cog = null;
    var TargetCog : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        this.StateInitialize(init);
        if(this.SensorCopPath != null)
            this.SensorCog = this.SensorCopPath.Cog;
    }
    
    [Override] function Enter()
    {
        (this as SuperState)~>Enter();
        
        // reset the target
        this.TargetCog = null;
        
        // connect to the sensor events
        if(this.SensorCog != null)
        {
            Zero.Connect(this.SensorCog, Events.CollisionStarted, this.OnSensorEnter);
        }
    }
    [Override] function Exit()
    {
        // disconnect to the sensor events
        if(this.SensorCog != null)
        {
            Zero.Disconnect(this.SensorCog, Events.CollisionStarted, this);
        }
        
        (this as SuperState)~>Exit();
    }
    [Override] function OnSensorEnter(event : CollisionEvent)
    {
        Console.WriteLine("CollidedWithSensor");
        // set this object as our target
        this.TargetCog = event.OtherObject;
        // change state to seek 
        this.Owner.StateMachine.ChangeState(this.Owner.GuardSM_SeekTarget);
    }
    
    [Override] function Update(event: UpdateEvent)
    {
        this.SensorCog.SphereCollider.DebugDraw();
        
    }
}

class GuardSM_Patrol_Walk : State
{
    
    [Property] 
    var Duration : Real = 3.0;      // walk duration
    var Direction : Real = 1.0;     // walk direction - chosen at random.
    
    // movement state machine - Used to actually move. 
    var MovementStateMachine : StateMachine = null;
    
    // Initialize
    function Initialize(init : CogInitializer)
    {
        this.StateInitialize(init);
        this.MovementStateMachine = this.Owner.StateMachine.FindStateMachineFromRoot("Movement");
        
        if((new Random()).Integer() % 2 == 0)
            this.Direction = -1.0;
        else
            this.Direction = 1.0;
            
    }
    
    // State function
    [Override] function Enter()
    {
        this.Direction *= -1.0;
        if(this.MovementStateMachine != null)
        {
            this.MovementStateMachine.Owner.MoveSM_Walk.Direction = this.Direction;
            this.MovementStateMachine.ChangeState("MoveSM_Walk");
        }
    }
    
    [Override]function Update(event : UpdateEvent)
    {
        if(this.TimeInState >= this.Duration)
            this.Owner.StateMachine.ChangeState(this.Owner.GuardSM_Patrol_Wait);
    }
    
}

class GuardSM_Patrol_Wait : State
{
    [Property] var Duration : Real = 3.0;
    var MovementStateMachine : StateMachine = null;
    
    function Initialize(init : CogInitializer)
    {
        this.StateInitialize(init);
        this.MovementStateMachine = this.Owner.StateMachine.FindStateMachineFromRoot("Movement");
    }
    [Override] function Enter()
    {
        if(this.MovementStateMachine != null)
        {
            this.MovementStateMachine.ChangeState("MoveSM_Idle");
        }
    }
    [Override]function Update(event : UpdateEvent)
    {
        if(this.TimeInState >= this.Duration)
            this.Owner.StateMachine.ChangeState(this.Owner.GuardSM_Patrol_Walk);
    }
}