class MoveSM_Idle : AnimState
{
    function Initialize(init : CogInitializer)
    {
        this.StateInitialize(init);
    }
    
    [Override] function Enter()
    {
        if(this.Actor.RigidBody != null && this.Actor.Sprite != null)
            this.Actor.Sprite.FlipX = this.Actor.RigidBody.Velocity.X < 0;
    }
}

class MoveSM_Walk : AnimState
{
    [Property] var Speed : Real = 3.0;
    [Property] var Direction : Real = 1.0;
    
    function Initialize(init : CogInitializer)
    {
        this.StateInitialize(init);
        // change the movement 
            if(this.Actor.Sprite != null)
                this.Actor.Sprite.FlipX = this.Direction < 0;
    }
    [Override]function Update(event : UpdateEvent)
    {
        // get the body
        var body = this.Actor.RigidBody;
        if(body != null)
        {
            // apply some movement 
            body.Velocity += Real3(this.Speed * this.Direction * event.Dt, 0,0);
            
            // change the movement 
            if(this.Actor.Sprite != null)
                this.Actor.Sprite.FlipX = this.Direction < 0;
        }
    }
}

class MoveSM_Jump : AnimState
{
    [Property] var Impulse : Real = 10.0;
    
    // -----------------------------------------------------------------
    function Initialize(init : CogInitializer)
    {
        this.StateInitialize(init);
        Console.WriteLine("State `typeid(this).Name`::Initialize");
    }
    
    // -----------------------------------------------------------------
    [Override]function Enter()
    {
        Zero.Connect(this.Actor, Events.CollisionStarted, this.OnCollisionStarted);
        
        // get the body
        var body = this.Actor.RigidBody;
        if(body != null)
        {
            // apply some movement 
            body.Velocity += Real3(0, this.Impulse,0);
        }
        
        if(this.Actor.RigidBody != null && this.Actor.Sprite != null)
            this.Actor.Sprite.FlipX = this.Actor.RigidBody.Velocity.X < 0;
    }
    
    // -----------------------------------------------------------------
    [Override] function Exit()
    {
        Zero.Disconnect(this.Actor, Events.CollisionStarted, this);
    }
    
    // -----------------------------------------------------------------
    function OnCollisionStarted(event : CollisionEvent)
    {
        // If I collide with the ground, I'm back to idle
        if(event.OtherObject.Collider.CollisionGroup == CollisionGroup.GroundCollGroup)
        {
            this.Owner.StateMachine.ChangeState(this.Owner.MoveSM_Idle);
        }
    }
} 