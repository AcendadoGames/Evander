class ThunderAnim : ZilchComponent
{
    [Property]
    var Iterations : Integer = 0;
    var CurrentIteration : Integer = 0;
    [Property]
    var StartOpacity : Real = 0;
    [Property]
    var EndOpacity : Real = 0;
    [Property]
    var FadeInDuration : Real = 0;
    [Property]
    var FadeOutDuration : Real = 0;
    [Property]
    var FadeInDelay : Real = 0;
    [Property]
    var FadeOutDelay : Real = 0;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
    }
    function OpacityAnim()
    {
        var inDelay = this.FadeInDelay;
        var outDelay = this.FadeOutDelay;

        while(this.CurrentIteration < this.Iterations)
        {
            this.CurrentIteration += 1;
                        
            var fadeIn = Action.Sequence(this.Owner.Actions);
            
            Action.Delay(fadeIn, inDelay);
            
            Action.Property(fadeIn,
                            @this.Owner.Sprite.Color,
                            Real4(this.Owner.Sprite.Color.X,this.Owner.Sprite.Color.Y,this.Owner.Sprite.Color.Z,this.EndOpacity),
                            this.FadeInDuration,
                            Ease.SinInOut);
            
            var fadeOut = Action.Sequence(this.Owner.Actions);
            
            Action.Delay(fadeOut, outDelay);
                
            Action.Property(fadeOut,
                            @this.Owner.Sprite.Color,
                            Real4(this.Owner.Sprite.Color.X,this.Owner.Sprite.Color.Y,this.Owner.Sprite.Color.Z,this.StartOpacity),
                            this.FadeOutDuration,
                            Ease.SinInOut);   
                            
            inDelay += this.FadeOutDuration + this.FadeInDuration;
            outDelay = inDelay + this.FadeOutDuration;
        }
        
        this.CurrentIteration = 0;
    }
    function OpacityToCero()
    {
        var fadeOut = Action.Sequence(this.Owner.Actions);
            
            Action.Delay(fadeOut, 1.8);
            
            Action.Property(fadeOut,
                            @this.Owner.Sprite.Color,
                            Real4(this.Owner.Sprite.Color.X,this.Owner.Sprite.Color.Y,this.Owner.Sprite.Color.Z,0),
                            0.5,
                            Ease.SinInOut);
    }
}
