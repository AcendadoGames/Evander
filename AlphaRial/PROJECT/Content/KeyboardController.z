class KeyboardController : ZilchComponent
{
    [Property]
    var DashTime : Real = 2.0;
    [Property]
    var TimeSlowMo : Real = 2.0;
    [Property]
    var MaxTimeSlowed : Real = 4.0;
    var TimeIsSlowed : Boolean = false;
    [Property]
    var TargetSprite1 : Archetype;
    [Property]
    var TargetSprite2 : Archetype;
    [Property]
    var TargetSprite3 : Archetype;
    [Property]
    var TargetSprite4 : Archetype;
    var Particle : Archetype = Archetype.SpecialDash;
    
    var MoveLeft : String = "MoveLeft";
    var MoveRight : String = "MoveRight";
    var DashLeft : String = "DashLeft";
    var DashRight : String = "DashRight";
    var Jump : String = "Jump";
    var MoveDown : String = "MoveDown";
    var Spell1 : String = "Spell1";
    var Spell1Dash : String = "Spell1Dash";
    var NotMoving : String = "NotMoving";
    var Temp1 : Real;
    
    var LeftTriggerPressed : Boolean = false;
    var Temp2 : Boolean = false;
    
    var Controller:Gamepad = null;
    
    var A: Cog = null;
    var B: Cog = null;
    
    var Enablemovement : Boolean = true;
    var Timer : Real = 2.0;
    function Initialize(init : CogInitializer)
    {
        this.Controller = Zero.Gamepads.GetGamePad(0);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);
    }
    function IfAnyKey():Boolean
    {
        if(Zero.Keyboard.KeyIsDown(Keys.A))
            return true;
        if (Zero.Keyboard.KeyIsDown(Keys.D))
            return true;
        if (Zero.Keyboard.KeyIsDown(Keys.W))
            return true;
        if (Zero.Keyboard.KeyIsDown(Keys.Space))
            return true;
        if (Zero.Keyboard.KeyIsDown(Keys.T))
            return true;
        if (Zero.Keyboard.KeyIsDown(Keys.R))
            return true;
        if (Zero.Keyboard.KeyIsDown(Keys.Z))
            return true;
        if (Zero.Keyboard.KeyIsDown(Keys.W))
            return true;
        if (Zero.Mouse.IsButtonDown(MouseButtons.Left))
            return true;
        if (Zero.Mouse.IsButtonDown(MouseButtons.Right))
            return true;
        if (this.Controller.IsButtonHeld(Buttons.StickLeft))
            return true;
        if (this.Controller.IsButtonHeld(Buttons.StickRight))
            return true;
        if (this.Controller.IsButtonPressed(Buttons.B))
            return true;
        if (this.Controller.IsButtonPressed(Buttons.A))
            return true;
        if (this.Controller.IsButtonPressed(Buttons.X))
            return true;
        if (this.Controller.IsButtonPressed(Buttons.Y))
            return true;
            
        return false;
    }
    function OnLogicUpdate(event : UpdateEvent)
    {
        var player : Real3 = this.Owner.Transform.Translation;
        var distance = Math.Distance(this.Owner.Transform.Translation, this.Space.FindObjectByName("PrototypePlayer").TargetSelector.TargetPosition); 
        var ev  = ZilchEvent();
        var position = Real3(this.Owner.TargetSelector.TargetPosition.X, this.Owner.TargetSelector.TargetPosition.Y, 6);
        
        this.Timer += event.Dt;
        
        if(this.Enablemovement && this.Space.GlobalVariables.EnablePlay)
        {
            if((Zero.Keyboard.KeyIsDown(Keys.A) || this.Controller.IsButtonHeld(Buttons.StickLeft)) && 
            ((Zero.Keyboard.KeyIsPressed(Keys.Z)) || this.Controller.IsButtonPressed(Buttons.B)))
            {
                // move left    
                if(this.Timer >= this.DashTime)
                {
                    ev.EventId = this.DashLeft;
                    this.Owner.DispatchEvent(this.DashLeft, ev);
                    this.Timer = 0;
                }
            }
            else if(Zero.Keyboard.KeyIsDown(Keys.A) || this.Controller.IsButtonHeld(Buttons.StickLeft))
            {
                // move left    
                ev.EventId = this.MoveLeft;
                this.Owner.DispatchEvent(this.MoveLeft, ev);
            }
            if((Zero.Keyboard.KeyIsDown(Keys.D) || this.Controller.IsButtonHeld(Buttons.StickRight)) && 
            ((Zero.Keyboard.KeyIsPressed(Keys.Z)) || this.Controller.IsButtonPressed(Buttons.B)))
            {
                // move right
                if(this.Timer >= this.DashTime)
                {
                    ev.EventId = this.DashRight;
                    this.Owner.DispatchEvent(this.DashRight, ev);
                    this.Timer = 0;
                }
            }
            else if(Zero.Keyboard.KeyIsDown(Keys.D) || this.Controller.IsButtonHeld(Buttons.StickRight))
            {
                // move right
                ev.EventId = this.MoveRight;
                this.Owner.DispatchEvent(this.MoveRight, ev);
            }
            if((Zero.Keyboard.KeyIsPressed(Keys.W) || this.Controller.IsButtonPressed(Buttons.A)) && this.Space.GlobalVariables.CanJump == true)
            {
                // move top
                ev.EventId = this.Jump;
                this.Owner.DispatchEvent(this.Jump, ev);
            }
            //Alex-------------------------------------------------------------Checking if the player is Idle
            
            this.IfAnyKey();
            if (this.IfAnyKey() == false)
            {
                
                ev.EventId = this.NotMoving;
                this.Owner.DispatchEvent(this.NotMoving, ev);
            }
        }
        //-----------------------------------SLOW MOTION-------------------------------------------------
        this.LeftTriggerInput();
        
        if ((Zero.Keyboard.KeyIsPressed(Keys.J) || this.LeftTriggerPressed) && this.TimeSlowMo >= 0.0 
            && this.Space.GlobalVariables.Dashing == false && !this.Space.GlobalVariables.NoEnemies) /*Targetting while not in dash, creating the target*/
        { 
            this.A = this.Space.CreateAtPosition(this.TargetSprite1, position);
            this.B = this.Space.CreateAtPosition(this.TargetSprite2, position);
        }
        
        if( (this.Space.GlobalVariables.OnGroundCanDash == false || distance > 25) && this.A != null && position != Real3(0, 0, 0))/*selcting the color if you can dash*/
            {
                this.A.Sprite.Color = Real4(1, 100/255 , 100/255, 1);
                this.B.Sprite.Color = Real4(1, 100/255 , 100/255, 1);
            }
        else if ((this.Space.GlobalVariables.OnGroundCanDash == false || distance < 25) && this.A != null && position != Real3(0, 0, 0))
        {
            this.A.Sprite.Color = Real4(0 , 1, 224/255, 1);
            this.B.Sprite.Color = Real4(0 , 1, 224/255, 1);
        }
        
        if ((Zero.Keyboard.KeyIsDown(Keys.J) || this.Controller.LeftTrigger > 0.2) && this.TimeSlowMo >= 0.0) /*Slowing the Time*/
        {
            this.TimeIsSlowed = true;
            this.TimeSlowMo -= event.Dt / this.Space.TimeSpace.TimeScale;
            this.Space.TimeSpace.TimeScale = 0.1;
                
            if(this.TimeSlowMo <= 0.5) /* Lerping At the end of the time if the player stays in SlowMo*/
                this.Space.TimeSpace.TimeScale = Math.Lerp(this.Space.TimeSpace.TimeScale, 1, 0.01);
            if(distance < 25 && distance > 3 && this.TimeSlowMo > 0)
                this.Space.GlobalVariables.CanDash = true;
        }
        else if(this.Space.GlobalVariables.ComboSlowTime <= 0)/*This is putting the time as it was*/
        {
            this.Space.TimeSpace.TimeScale = 1;
            this.Space.GlobalVariables.CanDash = false;
        }
        if ((this.Space.TimeSpace.TimeScale) == 1 && (this.TimeSlowMo <= this.MaxTimeSlowed)) /* Reloading the SlowMo Aiming Power*/
        {
            this.TimeIsSlowed = false;
            this.TimeSlowMo += event.Dt;
        }
        //-----------------------------------SPECIAL DASH-------------------------------------------------
        if((Zero.Keyboard.KeyIsPressed(Keys.Space) || this.Controller.RightTrigger > 0.2) && 
          (Zero.Keyboard.KeyIsDown(Keys.J) || this.Controller.LeftTrigger > 0.2) && 
          !this.Space.GlobalVariables.NoEnemies && this.Space.GlobalVariables.CanDash == true && this.Space.GlobalVariables.OnGroundCanDash == true)
        {
            if(this.Owner.Sprite.Visible == true)
                this.Space.CreateAtPosition(this.Particle, player);
            
            ev.EventId = this.Spell1Dash;
            this.Space.DispatchEvent(this.Spell1Dash, ev);
            
            if(distance < 0.5)
            {
                this.Space.GlobalVariables.Dashing = false;
                this.Space.GlobalVariables.OnGroundCanDash = false;
            }
        }
    }
    function LeftTriggerInput()
    {
        if(this.Controller.LeftTrigger > 0.2 && !this.Temp2)
        {
            this.LeftTriggerPressed = true;
            this.Temp2 = true;
        }
        else
            this.LeftTriggerPressed = false;  
        
        if(this.Controller.LeftTrigger < 0.2)
            this.Temp2 = false;
        
    }
    function OnCollisionPersisted(event : CollisionEvent)
    {
        if(this.Space.GlobalVariables.CanDash == true && (event.OtherObject.Name == "Ground" || event.OtherObject.Name == "Wall"))
        {
            this.Space.GlobalVariables.OnGroundCanDash = true;
        }
    }
}