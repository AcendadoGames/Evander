class Janus_Phase_3 : SuperState
{
    var JanusTotalHealth : Real;
    [Property]
    var Phase1MinHealth : Real = 100;
    
    var CurrentHealth : Real;
    
    function Initialize(init : CogInitializer)
    {
        this.StateInitialize(init);
    }
    [Override]function Enter()
    {
        this.JanusTotalHealth = this.Space.FindObjectByName("Janus").JanusHealth.JanusHealth;
        this.Owner.StateMachine.ChangeState(this.Owner.Janus_Phase_3_Attack);
    }
}
class Janus_Phase_3_Attack : State
{
    var JanusTotalHealth : Real;
    [Property]
    var Phase3RecoveryHealth : Real = 100;
    [Property]
    var AttackTime : Real = 4;
    [Property]
    var ArmAttackSpeed : Real = 0.7;
    [Property]
    var ArrowAttackSpeed : Real = 0.7;
    [Property]
    var NumberOfArrows : Real = 30;
    [Property]
    var WaveAttackSpeed : Real = 0.7;
    
    var RandomGenerator : Random = Random();
    var RandomNum : Integer;
    var TimerForNextAttack : Real = 0.0;
    var TimerForArmAttack : Real = 0.0;
    var TimerForArrowAttack : Real = 0.0;
    var TimerForWaveAttack : Real = 0.0;
    var ColorForPreAttack : Real4 = Real4(0.0, 0.0, 1, 1);
    var ColorForAttack : Real4 = Real4(1, 0.0, 0.0, 1);
    
    function Initialize(init : CogInitializer)
    {
        this.StateInitialize(init);
        this.RandomGenerator = Random();
        
    }
    [Override]function Enter()
    {
        Console.WriteLine("Phase2");
        Console.WriteLine("Attacking");
        this.JanusTotalHealth = this.Space.FindObjectByName("Janus").JanusHealth.JanusHealth;
    }
    function WaveAttack()
    {
        
    }
    function ArrowAttack()
    {
        var counter = 0;
        
        var spawnPosition = this.Space.FindObjectByName("ArrowSpawner").Transform.Translation;
        var archetypeToSpawn = Archetype.ArrowForJanus;
        
        var randomOffsetX = this.RandomGenerator.Range(11,-11);
        var randomOffsetY = this.RandomGenerator.Range(0, 4);
        var offset = Real3(randomOffsetX, randomOffsetY, 0);
        
        for (counter = 0; counter <= this.NumberOfArrows; counter += 1)
        {
            randomOffsetX = this.RandomGenerator.Range(3,-3);
            randomOffsetY = this.RandomGenerator.Range(0, 4);
            
            offset = Real3(randomOffsetX, randomOffsetY, -0.5);
            
            this.Space.CreateAtPosition(archetypeToSpawn, spawnPosition + offset);
        }
        this.TimerForArrowAttack = 0;
        }

    function ArmAttack()
    {
        this.Owner.FindChildByName("ArmDamage3").Sprite.Color = this.ColorForAttack;
        this.Owner.FindChildByName("ArmDamage3").BoxCollider.SendsEvents = true;
        this.Owner.FindChildByName("ArmDamage3").JanusArmDamage.DoingTheAttack = true;
    }
    
    [Override]function Update(event : UpdateEvent)
        {
            var playerPosition = this.Space.FindObjectByName("PrototypePlayer").Transform.Translation;
            var ownerPosition = this.Owner.Transform.Translation;
            
            var distanceToPlayer = Math.Distance(playerPosition,ownerPosition);
            
            //Console.WriteLine(distanceToPlayer);
            
            this.JanusTotalHealth = this.Space.FindObjectByName("Janus").JanusHealth.JanusHealth;
            
            if(this.Space.FindObjectByName("BossStartingLine").StartingBossScript.BossFight == true)
            {
                this.TimerForNextAttack += event.Dt;
                
                if (this.TimerForNextAttack >= this.AttackTime)
                {
                    this.RandomNum = this.RandomGenerator.DieRoll(3);
                    this.TimerForNextAttack = 0;
                }
                /*--------------------------------------First Attack-----------------------------------------------*/
                if (this.RandomNum == 1)
                {
                    this.TimerForArmAttack += event.Dt;
                    this.Owner.FindChildByName("ArmDamage3").Sprite.Visible = true;
                    this.Owner.FindChildByName("ArmDamage3").Sprite.Color = this.ColorForPreAttack;
                    if(this.TimerForArmAttack >= this.ArmAttackSpeed)
                    {
                        this.ArmAttack();
                        this.TimerForArmAttack = 0;
                        this.RandomNum = 0;
                    }
                }
                /*--------------------------------------Second Attack-----------------------------------------------*/
                if (this.RandomNum == 2)
                {
                    this.TimerForArrowAttack += event.Dt;
                    this.Space.FindObjectByName("ArrowSpawner").MovingArrowSpawner.Shooting = true;
                    this.Space.FindObjectByName("Portal").BoxParticleEmitter.Active = true;
                    this.Space.FindObjectByName("BackGroundPortal").BoxParticleEmitter.Active = true;
                    
                    if(this.TimerForArrowAttack >= this.ArrowAttackSpeed)
                    {
                        this.ArrowAttack();
                        this.TimerForNextAttack = 0;
                        this.RandomNum = 0;
                    }
                }
                /*---------------------------------------Third Attack-----------------------------------------------*/
                if (this.RandomNum == 3)
                {

                }
                /*--------------------------------------------------------------------------------------------------*/
                if (this.JanusTotalHealth <= this.Phase3RecoveryHealth)
                {
                    this.Owner.StateMachine.ChangeState(this.Owner.Janus_Phase_3_Recover);
                }
            }
        }
    [Override] function Exit()
        {
            this.TimerForNextAttack = 0;
            
            this.TimerForArrowAttack = 0;
            this.TimerForArmAttack = 0;
            
            this.Owner.FindChildByName("ArmDamage3").Sprite.Visible = false;
            
            this.RandomNum = 0;
        }
    }
    
class Janus_Phase_3_Recover : State
{
    var JanusTotalHealth : Real;
    
    [Property]
    var Phase1MinHealth : Real = 100;
    
    var HitCounter : Integer;
    var CanHeal :  Boolean = true;
    
    function Initialize(init : CogInitializer)
    {
        this.StateInitialize(init);
    }
    
    [Override] function Enter()
    {
        this.Space.FindObjectByName("HealingEffect").BoxParticleEmitter.Active = true;
        
        Zero.Connect(this.Owner, Events.CollisionStarted, this.DamageReceived);
        this.Space.FindObjectByName("Janus").JanusHealth.Recovering = true;
        this.JanusTotalHealth = this.Space.FindObjectByName("Janus").JanusHealth.JanusHealth;
        this.HitCounter = 10;
        
        Console.WriteLine("Recovering");
    }
    
    [Override] function Update(event: UpdateEvent)
    {
        //Console.WriteLine (this.JanusTotalHealth);
        if(this.HitCounter <= 0)
            this.CanHeal = false;
        
        if(this.CanHeal == true)
            this.Owner.Parent.Parent.Parent.JanusHealth.JanusHealth += 0.9;
            
            
        if (this.Owner.Parent.Parent.Parent.JanusHealth.JanusHealth >= 300)
        {
            this.Owner.StateMachine.ChangeState(this.Owner.Janus_Phase_3_Attack);
            this.Exit();
        }
        if(this.CanHeal == false)
        {}
            //this.Owner.StateMachine.FindStateMachineFromRoot("Janus_Ai").ChangeState("Janus_Phase_3");
    }
    [Override] function Exit()
    {
        this.Space.FindObjectByName("HealingEffect").BoxParticleEmitter.Active = false;
        this.Space.FindObjectByName("Janus").JanusHealth.Recovering = false;
        this.CanHeal = true;
        Zero.Disconnect(this.Owner, Events.CollisionStarted, this);
    }
    function DamageReceived(event : CollisionEvent)
    {
        if(event.OtherObject.Name == "damage")
        {
            this.HitCounter -= 1;
        }
    }
}