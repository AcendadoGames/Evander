class TimeLapse : ZilchComponent
{
    [Property]
    var TimeLapseSprite : SpriteSource;
    [Property]
    var NormalSprite : SpriteSource;
    
    [Property]
    var MaxFrames : Integer = 120;
    var Frames : Array[Frame] = new Array[Frame]();
    var  TimeLim: Real = 120;
    var TimeRewind : Boolean = false;
    
    var Controller:Gamepad = null;
    
    function Initialize(init : CogInitializer)
    {
        this.Controller = Zero.Gamepads.GetGamePad(0);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)  
    {
        if(Zero.Keyboard.KeyIsDown(Keys.T) || (this.Controller.IsButtonHeld(Buttons.LeftShoulder) && this.Controller.IsButtonHeld(Buttons.RightShoulder)) && this.TimeLim > 0
           && this.Owner.PlayerHealth.Health != 0)
        {
            this.TimeRewind = true;
            if(this.Frames.All.IsNotEmpty && this.TimeLim != 0)
            {
                this.Owner.PlayerAnimation.TimeRewinding = true;
                this.Space.TimeSpace.TimeScale = 0.2;
                this.Owner.Transform.Translation = this.Frames[this.Frames.Count - 1].Position;
                this.Owner.Transform.EulerAngles = this.Frames[this.Frames.Count - 1].Rotation;
                this.Owner.PlayerHealth.Health = this.Frames[this.Frames.Count - 1].HP;
                this.Owner.PlayerHealth.CurrentHealth = this.Frames[this.Frames.Count - 1].HP;
                this.Owner.Sprite.SpriteSource = this.Frames[this.Frames.Count - 1].Animation;
                this.Owner.Sprite.CurrentFrame = this.Frames[this.Frames.Count - 1].CurrentFrame;
                this.Owner.Sprite.FlipX = this.Frames[this.Frames.Count - 1].FlipX;
                this.Frames.Pop();
                this.TimeLim -= 1;
            }
            else
            {
                this.Space.TimeSpace.TimeScale = 1;
                this.Owner.PlayerAnimation.TimeRewinding = false;
                this.TimeRewind = false;

            }
        }
        else if(this.Frames.Count <= this.MaxFrames)
        {
            this.Frames.Push(Frame(this.Owner.Transform.Translation, this.Owner.Transform.EulerAngles, 
                                   this.Owner.PlayerHealth.Health, this.Owner.Sprite.SpriteSource,
                                   this.Owner.Sprite.CurrentFrame, this.Owner.Sprite.FlipX));
            this.Owner.PlayerAnimation.TimeRewinding = false;
            this.TimeRewind = false;
        }
        else 
        {
            this.Frames.RemoveAt(0);
            this.Owner.PlayerAnimation.TimeRewinding = false;
            this.TimeRewind = false;
            if ((this.TimeLim < 120) && (!Zero.Keyboard.KeyIsPressed(Keys.T)
                && (!this.Controller.IsButtonHeld(Buttons.LeftShoulder) || !this.Controller.IsButtonHeld(Buttons.RightShoulder))))
            {
                this.TimeLim += 1;
            }
                
        }
    }
    
    
}

class Frame
{
    var Position : Real3 = Real3(0,0,0);
    var Rotation : Real3 = Real3(0,0,0);
    var HP : Integer = Integer(0);
    var Animation : SpriteSource;
    var CurrentFrame : Integer;
    var FlipX : Boolean;
    constructor (pos : Real3, rot : Real3, heal : Integer, animation : SpriteSource, currentFrame : Integer, flipX : Boolean)
    {
        this.Position = pos;
        this.Rotation = rot;
        this.HP = heal;
        this.Animation = animation;
        this.CurrentFrame = currentFrame;
        this.FlipX = flipX;
    }
    constructor() {}

    destructor()
    {
    }
}