class Spawner : ZilchComponent
{
    [Property]
    var ArcherSpawner : Boolean;//Type of Spawner
    [Property]
    var MeleeSpawner : Boolean;//Type of Spawner

    var InArena : Boolean = false;//Checks if you're in the arena
    var InRound : Boolean = false;//Checks if you're in the round
    var RoundClear : Boolean = true;//Checks if the round is cleared
    var RoundNum : Integer = 1;//Round number
    var RoundText : String;//Round Text

    var Archer : Archetype = Archetype.Archer;//Archetypes to spawn
    var Melee : Archetype = Archetype.Melee;//Archetype to Spawn

    var SpawnArcher : Boolean = true;//Control number of archers created
    var SpawnMelee : Boolean = true;//ontrol number of melee created

    var CountArcher : Real = 0;//Counts how many archers are on game
    var CountMelee : Real = 0;//Counts how many melee are on game

    var TimeToArcher : Real = 0.0;//Counts how much time has passed since last Archer Spawn
    var TimeToMelee : Real = 0.0;//Counts how much time has passed since last Melee Spawn
    var SpawnRate : Real = 4.2;//Counts the interval of time since each spawn time

    var TimeBetweenRound : Real = 6;//Sets the time between rounds
    var TimeToNextRound : Real = 0.0;//Timer for between rounds time

    var ArcherPerRound : Integer = 0;//Number of Archers per row
    var MeleePerRound : Integer = 0;//Number of Melees per row

    var NextRoundMessage : Boolean = false;//To comunicate with the HUD

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {

        var randomGenerator : Random = Random();//Generates a random number
        var randomOffset = randomGenerator.Range(3,-3);//Generates a random offset X

        var offset = this.Owner.Transform.Translation.X + randomOffset;//Generates the offset to spawn archers

        var vectorFromSpawnerToCenter = Real3(0,0,1) - this.Owner.Transform.Translation;//Computes the vector the melee spawned must follow

        /****************Checking if there are enemies********************/
        if(!this.SpawnArcher && !this.SpawnMelee)
            this.RoundClear = true;

        /**************Aumenting Dificulty with time*********************/
        if(this.SpawnRate >= 2.5 && this.InArena)
        {
            if(this.RoundClear)
            {
                this.TimeToNextRound += event.Dt;
                this.RoundText = ("Round Number `this.RoundNum`");
                this.NextRoundMessage = true;
            }
        }

        if(this.TimeToNextRound >= this.TimeBetweenRound)
        {
            this.RoundClear = false;
            this.SpawnRate -= 0.1;
            this.RoundNum += 1;
            this.ArcherPerRound += 1;
            this.MeleePerRound += 2;
            this.NextRoundMessage = false;
            this.InRound = true;
            this.TimeToNextRound = 0;
        }

        /**********************Seting the start for rounds******************************/
        if(this.InArena == true )//Start when you are already in the arena and more.
        {
            this.TimeToMelee += event.Dt;
            this.TimeToArcher += event.Dt;
        }

        if(this.InRound)
        {
            if(this.ArcherSpawner && this.SpawnArcher)
            {
                if(this.TimeToArcher >= this.SpawnRate)
                {
                    var archer = this.Space.CreateAtPosition(this.Archer, Real3(offset, this.Owner.Transform.Translation.Y, 1));
                    this.CountArcher +=1;
                    this.TimeToArcher = 0;
                }

                if(this.CountArcher == this.ArcherPerRound)
                {
                    this.SpawnArcher = false;
                    this.CountArcher = 0;
                }
            }

            if(this.MeleeSpawner && this.SpawnMelee)
            {
                if(this.TimeToMelee >= this.SpawnRate)
                {
                    var melee = this.Space.CreateAtPosition(this.Melee, this.Owner.Transform.Translation);
                    melee.RigidBody.Velocity = vectorFromSpawnerToCenter;
                    this.CountMelee +=1;
                    this.TimeToMelee = 0;
                }

                if(this.CountMelee == this.MeleePerRound)
                {
                    this.SpawnMelee = false;
                    this.CountMelee = 0;
                }
            }
        }
    }
}
