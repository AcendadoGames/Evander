class State : ZilchComponent
{
    // Dependencies guarantee that the StateMachine
    // component is initialzied before the states.
    [Dependency] var StateMachine : StateMachine;
    
    // Timer that keeps track of the time in the state
    var TimeInState : Real = 0.0;
    
    // Game object to act on - this is taken from the state machine
    var Actor : Cog = null;
    
    
    // Override these functions to customize the behavior
    [Virtual] function Enter(){}
    [Virtual] function Exit(){}
    [Virtual] function Update(event : UpdateEvent){}

    // -----------------------------------------------------------------
    // -----------------------------------------------------------------
    // INTERNAL USE - DO NOT MODIFY THIS CODE
    
    [Virtual]function StateInitialize(init : CogInitializer)
    {
        // Debug
        ////("State `typeid(this).Name`::Initialize");
        
        // add the state to the owner state machine. 
        this.Owner.StateMachine.AddState(typeid(this).Name, this);
        
        // Get the game object we act on from the owner state machine
        this.Actor = this.Owner.StateMachine.Actor;
    }
    [Virtual]function InternalEnter()
    {
        this.TimeInState = 0.0;
        this.Enter();
    }
    [Virtual]function InternalExit()
    {
        this.Exit();
    }
    [Virtual]function InternalUpdate(event : UpdateEvent)
    {
        this.TimeInState += event.Dt;
        this.Update(event);
    }
}