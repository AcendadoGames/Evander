class KeyboardController : ZilchComponent
{
    [Property]
    var TimeSlowMo : Real = 5.0;
    [Property]
    var MaxTimeSlowed : Real = 5.0;
    var TimeIsSlowed : Boolean = false;
    
    
    var MoveLeft : String = "MoveLeft";
    var MoveRight : String = "MoveRight";
    var DashLeft : String = "DashLeft";
    var DashRight : String = "DashRight";
    var Jump : String = "Jump";
    var MoveDown : String = "MoveDown";
    var Spell1 : String = "Spell1";
    var Spell1Dash : String = "Spell1Dash";
    
    [Property]
    var Spell1Cooldown : Real = 0.0;
    
    var Temp1 : Real;
    
    var Controller:Gamepad = null;
    
    function Initialize(init : CogInitializer)
    {
        this.Controller = Zero.Gamepads.GetGamePad(0);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.Temp1 = this.Spell1Cooldown;
        this.Spell1Cooldown = 0;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        var ev  = ZilchEvent();
        
        if((Zero.Keyboard.KeyIsDown(Keys.A) || this.Controller.IsButtonHeld(Buttons.StickLeft)) && 
        ((Zero.Keyboard.KeyIsPressed(Keys.Z)) || this.Controller.IsButtonPressed(Buttons.B)))
        {
            // move left    
            ev.EventId = this.DashLeft;
            this.Owner.DispatchEvent(this.DashLeft, ev);
        }
        else if(Zero.Keyboard.KeyIsDown(Keys.A) || this.Controller.IsButtonHeld(Buttons.StickLeft))
        {
            // move left    
            ev.EventId = this.MoveLeft;
            this.Owner.DispatchEvent(this.MoveLeft, ev);
        }
        if((Zero.Keyboard.KeyIsDown(Keys.D) || this.Controller.IsButtonHeld(Buttons.StickRight)) && 
        ((Zero.Keyboard.KeyIsPressed(Keys.Z)) || this.Controller.IsButtonPressed(Buttons.B)))
        {
            // move right
            ev.EventId = this.DashRight;
            this.Owner.DispatchEvent(this.DashRight, ev);
        }
        else if(Zero.Keyboard.KeyIsDown(Keys.D) || this.Controller.IsButtonHeld(Buttons.StickRight))
        {
            // move right
            ev.EventId = this.MoveRight;
            this.Owner.DispatchEvent(this.MoveRight, ev);
        }
        if((Zero.Keyboard.KeyIsPressed(Keys.W) || this.Controller.IsButtonPressed(Buttons.A)) && this.Space.GlobalVariables.CanJump)
        {
            this.Space.GlobalVariables.CanJump = false;
            // move top
            ev.EventId = this.Jump;
            this.Owner.DispatchEvent(this.Jump, ev);
        }
        /*if(Zero.Keyboard.KeyIsDown(Keys.S))
        {
            // move down
            ev.EventId = this.MoveDown;
            this.Owner.DispatchEvent(this.MoveDown, ev);
        }*/
        
        if((Zero.Keyboard.KeyIsPressed(Keys.Space) || this.Controller.RightTrigger > 0.2) && !this.Space.GlobalVariables.NoEnemies && 
           this.Spell1Cooldown <= 0 && !this.Space.GlobalVariables.CanDash && this.Space.GlobalVariables.CanSpell1)
        {
            // move down
            ev.EventId = this.Spell1;
            this.Owner.DispatchEvent(this.Spell1, ev);
            this.Spell1Cooldown = this.Temp1;
        }
        else if((Zero.Keyboard.KeyIsPressed(Keys.Space) || this.Controller.RightTrigger > 0.2) && !this.Space.GlobalVariables.NoEnemies && 
                this.Spell1Cooldown <= 0 && this.Space.GlobalVariables.CanDash && this.Space.GlobalVariables.CanSpell1)
        {
            // move down
            ev.EventId = this.Spell1Dash;
            this.Space.DispatchEvent(this.Spell1Dash, ev);
        }
        
        if(this.Spell1Cooldown > 0)
        {
            this.Spell1Cooldown -= event.Dt;
            this.Spell1Cooldown = Math.Round(this.Spell1Cooldown, -2);
        }
        
        //-----------------------------------SLOW MOTION-------------------------------------------------

        if ((Zero.Keyboard.KeyIsDown(Keys.J) || this.Controller.LeftTrigger > 0.2) && this.TimeSlowMo >= 0.0 ) /*Slowing the Time*/
        {
            
            this.TimeIsSlowed = true;
            this.TimeSlowMo -= event.Dt / this.Space.TimeSpace.TimeScale;
            
            if (this.TimeSlowMo >= 1.0)
            {
                this.Space.TimeSpace.TimeScale = 0.2;
            }
            else if(this.TimeSlowMo <= 1.0) /* Lerping At the end of the time if the player stays in SlowMo*/
            {
                this.Space.TimeSpace.TimeScale = Math.Lerp(this.Space.TimeSpace.TimeScale, 1, 0.07);
            }
        }
        else /*This is putting the time as it was*/
            this.Space.TimeSpace.TimeScale = 1;
            
            
        if ((this.Space.TimeSpace.TimeScale) == 1 && (this.TimeSlowMo <= this.MaxTimeSlowed)) /* Reloading the SlowMo Aiming Power*/
        {
            this.TimeIsSlowed = false;
            this.TimeSlowMo += event.Dt;
        }
    }
}