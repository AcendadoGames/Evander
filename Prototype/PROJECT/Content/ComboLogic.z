class ComboLogic : ZilchComponent
{
    var TimeToCancelCombo : Real = 0.7;
    var Temp1 : Real;
    var CurrentCombo : Array[String] = new Array[String]();
    
    
    function Initialize(init : CogInitializer)
    {
        this.Temp1 = this.TimeToCancelCombo;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Space, "L", this.WriteL);
        Zero.Connect(this.Space, "R", this.WriteR);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
            
        for (var i = 0; i < this.Space.ComboData.Combos.Count; i += 1)
        {
            if(this.CompareArrays(this.CurrentCombo, this.Space.ComboData.Combos[i].ComboName) &&
            this.TimeToCancelCombo > 0)
            {
                this.Space.ComboData.Combos[i].ExecuteCombo();
                break;
            }
        }
        
        
        if(this.TimeToCancelCombo > 0)
        {
            this.TimeToCancelCombo -= event.Dt;
            this.TimeToCancelCombo = Math.Round(this.TimeToCancelCombo, -2);
        }
        else
            this.CurrentCombo.Clear();
        
        //Console.WriteLine(this.CurrentCombo);
        
    }
    function WriteL (event : ZilchEvent)
    {
        if(this.CurrentCombo.Count == 3)
            this.CurrentCombo.Clear();
        
        this.CurrentCombo.Push("L");
        this.TimeToCancelCombo = this.Temp1;
    }
    function WriteR (event : ZilchEvent)
    {
        if(this.CurrentCombo.Count == 3)
            this.CurrentCombo.Clear();
            
        this.CurrentCombo.Push("R");
        this.TimeToCancelCombo = this.Temp1;
            
    }
    function CompareArrays (x : Array[String], y : Array[String]) : Boolean
    {
        if(x.Count != y.Count)
        {
            return false;
        }
        for (var i = 0; i < x.Count; i += 1)
        {
            if(x[i] != y[i])
            {
                return false;    
            }
        }
        return true;
    }
}
